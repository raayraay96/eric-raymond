name: Smart Auto-Fix Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "smart-deploy"
  cancel-in-progress: true

jobs:
  auto-fix-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Smart Auto-Fix Build Process
      id: smart-build
      run: |
        cd frontend
        echo "ü§ñ Smart Auto-Fix Bot Starting..."
        
        # Initialize fix tracker
        FIXES_APPLIED=""
        BUILD_SUCCESS=false
        
        # Function to try build
        try_build() {
          echo "üöÄ Attempting build..."
          if npm ci && npm run build; then
            echo "‚úÖ Build successful!"
            return 0
          else
            echo "‚ùå Build failed"
            return 1
          fi
        }
        
        # First attempt
        if try_build; then
          BUILD_SUCCESS=true
        else
          echo "üîß Build failed - analyzing errors and applying fixes..."
          
          # Capture error logs
          npm ci 2>&1 | tee /tmp/npm-error.log || true
          npm run build 2>&1 | tee /tmp/build-error.log || true
          
          # Fix 1: Package-lock.json corruption/sync issues
          if grep -q "Missing.*from lock file\|Invalid.*lock file" /tmp/npm-error.log; then
            echo "üîß Fixing corrupted/out-of-sync package-lock.json..."
            rm -f package-lock.json
            rm -rf node_modules
            npm install
            FIXES_APPLIED="${FIXES_APPLIED}- Regenerated corrupted package-lock.json\n"
          fi
          
          # Fix 2: React version conflicts
          if grep -q "peer react.*<19.*>=18\|ERESOLVE.*react" /tmp/npm-error.log; then
            echo "üîß Fixing React version conflicts..."
            npm install react@^18.3.1 react-dom@^18.3.1 @types/react@^18.3.12 @types/react-dom@^18.3.1 --save-exact
            FIXES_APPLIED="${FIXES_APPLIED}- Fixed React version compatibility (React 18)\n"
          fi
          
          # Fix 3: Three.js dependency issues
          if grep -q "@react-three\|three-" /tmp/npm-error.log; then
            echo "üîß Fixing Three.js dependencies..."
            npm install @react-three/fiber@^8.15.0 @react-three/drei@^9.100.0 three@^0.165.0 --save
            FIXES_APPLIED="${FIXES_APPLIED}- Updated Three.js dependencies\n"
          fi
          
          # Fix 4: Peer dependency issues
          if grep -q "peer dep\|peerDependencies" /tmp/npm-error.log; then
            echo "üîß Resolving peer dependencies..."
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
            FIXES_APPLIED="${FIXES_APPLIED}- Resolved peer dependency conflicts\n"
          fi
          
          # Fix 5: TypeScript configuration
          if grep -q "TypeScript error\|TS[0-9]" /tmp/build-error.log; then
            echo "üîß Updating TypeScript configuration..."
            find . -name "tsconfig*.json" -exec sed -i 's/"skipLibCheck": false/"skipLibCheck": true/g' {} \;
            FIXES_APPLIED="${FIXES_APPLIED}- Updated TypeScript configuration\n"
          fi
          
          # Fix 6: Cache issues
          if grep -q "cache\|ENOENT\|ENOTDIR" /tmp/npm-error.log; then
            echo "üîß Clearing npm cache..."
            npm cache clean --force
            rm -rf node_modules package-lock.json
            npm install
            FIXES_APPLIED="${FIXES_APPLIED}- Cleared npm cache and reinstalled\n"
          fi
          
          # Retry build after fixes
          echo "üîÑ Retrying build after auto-fixes..."
          if try_build; then
            BUILD_SUCCESS=true
            echo "‚úÖ Build successful after auto-fixes!"
            echo -e "üéâ Applied fixes:\n$FIXES_APPLIED"
          else
            echo "‚ùå Build still failing after auto-fixes"
            echo "üìã Manual intervention may be required"
            exit 1
          fi
        fi
        
        # Save results for next steps
        echo "fixes_applied<<EOF" >> $GITHUB_OUTPUT
        echo -e "$FIXES_APPLIED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "build_success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
        
    - name: Commit Auto-Fixes
      if: steps.smart-build.outputs.fixes_applied != ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Auto-Fix Bot ü§ñ"
        
        # Stage all changes
        git add .
        
        # Create detailed commit message
        echo "ü§ñ Auto-fix: Resolved build issues" > /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "Applied the following fixes:" >> /tmp/commit-msg.txt
        echo -e "${{ steps.smart-build.outputs.fixes_applied }}" >> /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "Build now passes successfully ‚úÖ" >> /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "Generated by Smart Auto-Fix System" >> /tmp/commit-msg.txt
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -F /tmp/commit-msg.txt
          git push
          echo "‚úÖ Auto-fixes committed and pushed!"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./frontend/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: auto-fix-and-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  notify-status:
    runs-on: ubuntu-latest
    needs: [auto-fix-and-build, deploy]
    if: always()
    steps:
      - name: Create Status Summary
        run: |
          echo "## ü§ñ Smart Auto-Fix Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.auto-fix-and-build.result }}" == "success" ]; then
            echo "‚úÖ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy.result }}" == "success" ]; then
              echo "‚úÖ **Deploy Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
              echo "üåê **Live Site**: https://raayraay96.github.io/eric-raymond" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Deploy Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "üîß Auto-fixes were attempted but could not resolve all issues" >> $GITHUB_STEP_SUMMARY
            echo "üìã Manual intervention may be required" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üõ†Ô∏è Auto-Fix Capabilities Applied" >> $GITHUB_STEP_SUMMARY
          echo "- Package-lock.json corruption/sync issues" >> $GITHUB_STEP_SUMMARY
          echo "- React version conflicts" >> $GITHUB_STEP_SUMMARY
          echo "- Three.js compatibility issues" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript configuration errors" >> $GITHUB_STEP_SUMMARY
          echo "- Peer dependency conflicts" >> $GITHUB_STEP_SUMMARY
          echo "- npm cache corruption" >> $GITHUB_STEP_SUMMARY