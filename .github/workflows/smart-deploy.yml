name: Smart Auto-Fix Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "smart-deploy"
  cancel-in-progress: true

jobs:
  auto-fix-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Updated to Node 20 for compatibility
        
    - name: Smart Auto-Fix Build Process
      id: smart-build
      run: |
        cd frontend
        echo "🤖 Smart Auto-Fix Bot Starting..."
        
        # Initialize fix tracker
        FIXES_APPLIED=""
        BUILD_SUCCESS=false
        
        # Function to completely clean and reinstall
        clean_install() {
          echo "🧹 Performing complete clean install..."
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
        }
        
        # Function to try build
        try_build() {
          echo "🚀 Attempting build..."
          if npm run build; then
            echo "✅ Build successful!"
            return 0
          else
            echo "❌ Build failed"
            return 1
          fi
        }
        
        # Aggressive fix for package-lock issues
        aggressive_fix() {
          echo "🔧 Applying aggressive package fixes..."
          
          # Remove all lock files and cache
          rm -rf node_modules package-lock.json .npm
          npm cache clean --force
          
          # Downgrade problematic packages to compatible versions
          echo "📦 Installing compatible package versions..."
          
          # Update package.json with compatible versions
          cat > package.json << 'EOF'
        {
          "name": "frontend",
          "private": true,
          "version": "0.0.0",
          "type": "module",
          "scripts": {
            "dev": "vite --host",
            "build": "tsc -b && vite build",
            "lint": "eslint .",
            "preview": "vite preview"
          },
          "dependencies": {
            "@fortawesome/fontawesome-free": "^6.7.2",
            "@react-three/drei": "^9.100.0",
            "@react-three/fiber": "^8.15.0",
            "@types/three": "^0.165.0",
            "axios": "^1.10.0",
            "framer-motion": "^11.0.0",
            "react": "^18.3.1",
            "react-dom": "^18.3.1",
            "react-github-calendar": "^4.5.9",
            "react-markdown": "^10.1.0",
            "react-router-dom": "^6.28.0",
            "three": "^0.165.0"
          },
          "devDependencies": {
            "@eslint/js": "^9.29.0",
            "@types/react": "^18.3.12",
            "@types/react-dom": "^18.3.1",
            "@vitejs/plugin-react": "^4.5.2",
            "autoprefixer": "^10.4.21",
            "concurrently": "^9.2.0",
            "eslint": "^9.29.0",
            "eslint-plugin-react-hooks": "^5.2.0",
            "eslint-plugin-react-refresh": "^0.4.20",
            "globals": "^16.2.0",
            "postcss": "^8.5.6",
            "tailwindcss": "^3.4.1",
            "typescript": "~5.8.3",
            "typescript-eslint": "^8.34.1",
            "vite": "^5.4.10"
          }
        }
        EOF
          
          # Install with legacy peer deps for compatibility
          npm install --legacy-peer-deps
          
          FIXES_APPLIED="${FIXES_APPLIED}- Downgraded to compatible package versions\n"
          FIXES_APPLIED="${FIXES_APPLIED}- Fixed Node.js version compatibility issues\n"
          FIXES_APPLIED="${FIXES_APPLIED}- Regenerated package-lock.json completely\n"
        }
        
        # Try initial clean install
        echo "🚀 Attempting initial clean install and build..."
        clean_install
        
        if try_build; then
          BUILD_SUCCESS=true
          echo "✅ Build successful on clean install!"
        else
          echo "❌ Clean install failed - applying aggressive fixes..."
          
          # Apply aggressive fixes
          aggressive_fix
          
          # Update TypeScript config for compatibility
          echo "🔧 Updating TypeScript configuration..."
          find . -name "tsconfig*.json" -exec sed -i 's/"skipLibCheck": false/"skipLibCheck": true/g' {} \;
          find . -name "tsconfig*.json" -exec sed -i '/"strict": true/a\    "skipLibCheck": true,' {} \;
          FIXES_APPLIED="${FIXES_APPLIED}- Updated TypeScript configuration\n"
          
          # Update Vite config for better compatibility
          echo "🔧 Updating Vite configuration..."
          cat > vite.config.ts << 'EOF'
        import { defineConfig } from 'vite';
        import react from '@vitejs/plugin-react';
        
        export default defineConfig({
          plugins: [react()],
          base: '/eric-raymond/',
          build: {
            outDir: 'dist',
            assetsDir: 'assets',
            sourcemap: false,
            rollupOptions: {
              output: {
                manualChunks: {
                  vendor: ['react', 'react-dom'],
                  three: ['three', '@react-three/fiber', '@react-three/drei']
                }
              }
            }
          },
          optimizeDeps: {
            include: ['react', 'react-dom', 'three', '@react-three/fiber', '@react-three/drei']
          },
          define: {
            global: 'globalThis',
          }
        });
        EOF
          FIXES_APPLIED="${FIXES_APPLIED}- Updated Vite configuration for compatibility\n"
          
          # Final build attempt
          echo "🔄 Final build attempt after all fixes..."
          if try_build; then
            BUILD_SUCCESS=true
            echo "✅ Build successful after aggressive auto-fixes!"
            echo -e "🎉 Applied fixes:\n$FIXES_APPLIED"
          else
            echo "❌ Build still failing after all auto-fixes"
            echo "📋 Manual intervention required"
            exit 1
          fi
        fi
        
        # Save results for next steps
        echo "fixes_applied<<EOF" >> $GITHUB_OUTPUT
        echo -e "$FIXES_APPLIED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "build_success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
        
    - name: Commit Auto-Fixes
      if: steps.smart-build.outputs.fixes_applied != ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Auto-Fix Bot 🤖"
        
        # Stage all changes
        git add .
        
        # Create detailed commit message
        echo "🤖 Auto-fix: Resolved compatibility issues" > /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "Applied the following fixes:" >> /tmp/commit-msg.txt
        echo -e "${{ steps.smart-build.outputs.fixes_applied }}" >> /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "- Updated to Node.js 20 for package compatibility" >> /tmp/commit-msg.txt
        echo "- Downgraded packages to stable versions" >> /tmp/commit-msg.txt
        echo "- Fixed package-lock.json synchronization" >> /tmp/commit-msg.txt
        echo "" >> /tmp/commit-msg.txt
        echo "Build now passes successfully ✅" >> /tmp/commit-msg.txt
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -F /tmp/commit-msg.txt
          git push
          echo "✅ Auto-fixes committed and pushed!"
        else
          echo "ℹ️ No changes to commit"
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./frontend/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: auto-fix-and-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  notify-status:
    runs-on: ubuntu-latest
    needs: [auto-fix-and-build, deploy]
    if: always()
    steps:
      - name: Create Status Summary
        run: |
          echo "## 🤖 Smart Auto-Fix Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.auto-fix-and-build.result }}" == "success" ]; then
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy.result }}" == "success" ]; then
              echo "✅ **Deploy Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **Live Site**: https://raayraay96.github.io/eric-raymond" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Deploy Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Auto-fixes were attempted but could not resolve all issues" >> $GITHUB_STEP_SUMMARY
            echo "📋 Manual intervention may be required" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Auto-Fix Capabilities Applied" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js version compatibility (upgraded to Node 20)" >> $GITHUB_STEP_SUMMARY
          echo "- Package version compatibility (downgraded problematic packages)" >> $GITHUB_STEP_SUMMARY
          echo "- Package-lock.json regeneration" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript configuration optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Vite configuration optimization" >> $GITHUB_STEP_SUMMARY